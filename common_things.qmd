# Common things for all projects

In this chapter we will describe piece of code that is common for all projects. It includes some technical convenience code and consent and demographic form.

## Convenience code

<p>Usually all your projects should start with the following code. PennController.ResetPrefix() allows you to write most of commands in a shorter way. "// DebugOff()" is a commented line because it starts with "//". It means that this line of code is disabled unless you remove the "//". Remove it and you disable debugging menu while anyone participates at your experiment.</p>

``` javascript
PennController.ResetPrefix()
// DebugOff()
```

<p>

There is a Sequence() function with arguments in the brackets. This command puts a strict way to execute logical blocks and other commands of your project. Some of the arguments are in quotation marks (they can be like this "" or this '', doesn't matter). These are blocks that we insert later in the code. Words in quotes are names of the blocks we are free to change (but we have to change the names both in the sequence function and below in the code!).Â 

We also see the SendResults() command before the "end" block. Unlike the blocks in the code, this function can be found only in this line. It writes down all the data gathered from a participant so far to the results file.

</p>

``` javascript
Sequence("instructions", "experiment", SendResults(), "end")
```

<p>You can add randomization to your trials within this line. For example, if we want to present our experimental task in a random manner we can write this:</p>

``` javascript
Sequence("instructions", randomize("experiment"), SendResults(), "end")
```

## Agreement and form

<p>Header -- is a command that maps commands on Trial elements. In other words, you write something for Header and it is automatically applied to each of Trial elements (which are our logical blocks of experiments).</p>

<p>In this particular case we declare two global variables AGE and SEX. Then, we use the *.log()* command to store a variable named "AGE" as a value of "age" column in our future dataset and the same with "SEX" and "sex". It is convenient since we will not need to write the *.log()* commands for all experimental trials again.</p>

``` javascript
Header(
    newVar("AGE").global(),
    newVar("SEX").global() 
)
.log("age", getVar("AGE"))
.log("sex", getVar("SEX"))
```

<p>Most probably you would like to collect some demographic information about your participants at least their age and sex in order to make your sample more representative. The way I prefer to do it is with uploading some html document with a small questionnaire. The sample html can be found with experiments' templates. You should upload it into the *Resources* area of your project, afterwards you can open and modify it in your project.</p>

<p>The chunk below has several aims: 1) it prints out the html questionnaire uploaded into the environment 2) it checks whether a participant filled mandatory margins otherwise red-colored warnings appear when the 'continue' button is pushed 3) A *getVar().set()* command fetches the value filled in the form's margin with the corresponding name and assigns it to the variable we declared in the *Header();* we extract the values with the [jQuery library](https://api.jquery.com/).</p>

``` javascript
newTrial("instructions",
// 1) print the questionnaire
newHtml("form", "form.html")
    .print()
    ,
// 2) check completeness
newButton("continue")
        .center()
        .print()
        .wait(getHtml("form").test.complete()
          .failure(getHtml("form").warn())
          )
    ,
// 3) assign values from the form to declared variables
    getVar("AGE").set(v=>$("input[name='age']").val()), 
    getVar("SEX").set(v=>$("input[name='sex']:checked").val())
)
```

## Organizing experimental list

## Ending slide
