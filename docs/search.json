[
  {
    "objectID": "intro.html#getting-started",
    "href": "intro.html#getting-started",
    "title": "1  Introduction",
    "section": "1.1 Getting started",
    "text": "1.1 Getting started\n\nOpen https://doc.pcibex.net/ page in your web-browser\nIf you are a first time user, sign up\nAfter that we are transferred to the “Farm”. It is where all your projects are stored. Also, you can start a new one with a pre-made template.\n(you can watch the short video below)"
  },
  {
    "objectID": "intro.html#investigating-working-environment",
    "href": "intro.html#investigating-working-environment",
    "title": "1  Introduction",
    "section": "1.2 Investigating working environment",
    "text": "1.2 Investigating working environment\n\nLet’s create an experiment with the proposed template of the Self-paced reading task on the platform. We will look around to see how the project development environment is structured in general.\n\n\nFirst of all, let's notice that we have some frames on the screen that divide our workspace. You can drag those frames with your cursor diagonally to customize your workspace a bit. We can identify 4 areas that are in use:\n\n\n\n\"Folders and Files\" consists of the environment we use for our project. It means that it contains files needed for the code execution. Some files already exist in this area and we can add some more but you shouldn't delete existing ones. There are for subeares within it:\n\n\nResources. It is empty yet but it is essential for any experiment. You put your stimuli there. It can be a .csv file containing your orthographical stimuli or picture file and audiofile. It can also be an archive with files alike.\nScripts. Basically a folder for your file code. There is a 'main.js' file (.js for JavaScript). It is a file which you will modify in another area. We will not need to touch anything here.\nAesthetics. It contains css files for pre-made modules. If we are advanced users we can modify these files right in this project as we will do with our 'main.js' file but we don't need it.\nModules. These are .js scripts for implementing experimental techniques via code. Files contained here are called \"Controller elements\" in the documentation. They are the kind of object that we will call with the newController() command in our future code. You can also open them right in the project editor here and check what is inside but ultimately you don't need to modify them.\n\n\nNext, let's look at the gray-shaded rectangle with code in the center of the screen. It is a place where we can edit files from our environment. Namely, we edit our code here and it is opened by default. On the top of the area you can see a fold 'main.js'. There is a cross meaning that you can close it and cease file editing. We can try to open any file from our environment simply by clicking its name. It will open in our editing area. We can switch within our open file by clicking the folds on the top of the area and close unnecessary ones.\nAssume we successfully wrote our code in the editor and we want to check how it works. It is what we do in the lower part of the screen in the Preview Experiment area. Since we opened the Self-Paced Reading template the code can already be rendered. You can click Refresh and go through your experiment in this small window or click Open in the new tab to test it in a new browser tab. The experiment will stop when a participant reaches its end or if a bug occurs in your code. Some bugs in your code may lead to not ending the experiment at all beware.\nThe Actions area allows you to manipulate your whole project at once. You can toggle the switch to publish an experiment, e.g. allow respondents to participate or block the spreaded link.  You can share a link to demonstrate an experiment to your colleague to test it or get a public link for data gathering. You can download results from your test trials or your participants data."
  },
  {
    "objectID": "intro.html#how-to-use-templates-we-are-about-to-discuss",
    "href": "intro.html#how-to-use-templates-we-are-about-to-discuss",
    "title": "1  Introduction",
    "section": "1.3 How to use templates we are about to discuss",
    "text": "1.3 How to use templates we are about to discuss\nYou can copy the template from the templates folder or download them."
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "2  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "pcibex_tutorial",
    "section": "",
    "text": "Preface\n\nIn this tutorial we will discuss how to run experiments on the online platform PCIbex. We will discuss how to upload stimuli, do proper code for your research, share an experiment and download results. We will look in details at two experimental techniques with online measurements: self-paced reading task (sprt for short) and speeded grammaticality judgement (sgj).\n\n\nAll discussed templates are available at the GitHub repository of this tutorial.\n\n\nFor specific questions you should check the project documentation. It includes links to video and textual tutorials by the PCIbex team. If you encounter specific issues you can check out the dedicated forums which is pretty active at the moment."
  },
  {
    "objectID": "common_code_and_form.html#convenience-code",
    "href": "common_code_and_form.html#convenience-code",
    "title": "2  Common code for all projects",
    "section": "2.1 Convenience code",
    "text": "2.1 Convenience code\n\nUsually all your projects should start with the following code. PennController.ResetPrefix() allows you to write most of commands in a shorter way. “// DebugOff()” is a commented line because it starts with “//”. It means that this line of code is disabled unless you remove the “//”. Remove it and you disable debugging menu while anyone participates at your experiment.\n\nPennController.ResetPrefix()\n// DebugOff()\n\nThere is a Sequence() function with arguments in the brackets. This command puts a strict way to execute logical blocks and other commands of your project. Some of the arguments are in quotation marks (they can be like this “” or this ’’, doesn’t matter). These are blocks that we insert later in the code. Words in quotes are names of the blocks we are free to change (but we have to change the names both in the sequence function and below in the code!). \nWe also see the SendResults() command before the “end” block. Unlike the blocks in the code, this function can be found only in this line. It writes down all the data gathered from a participant so far to the results file.\n\nSequence(\"instructions\", \"experiment\", SendResults(), \"end\")\n\nYou can add randomization to your trials within this line. For example, if we want to present our experimental task in a random manner we can write this:\n\nSequence(\"instructions\", randomize(\"experiment\"), SendResults(), \"end\")"
  },
  {
    "objectID": "common_code_and_form.html#agreement-and-form",
    "href": "common_code_and_form.html#agreement-and-form",
    "title": "2  Common code for all projects",
    "section": "2.2 Agreement and form",
    "text": "2.2 Agreement and form\n\nHeader – is a command that maps commands on Trial elements. In other words, you write something for Header and it is automatically applied to each of Trial elements (which are our logical blocks of experiments).\n\n\nIn this particular case we declare two global variables AGE and SEX. Then, we use the .log() command to store a variable named “AGE” as a value of “age” column in our future dataset and the same with “SEX” and “sex”. It is convenient since we will not need to write the .log() commands for all experimental trials again.\n\nHeader(\n    newVar(\"AGE\").global(),\n    newVar(\"SEX\").global() \n)\n.log(\"age\", getVar(\"AGE\"))\n.log(\"sex\", getVar(\"SEX\"))\n\nMost probably you would like to collect some demographic information about your participants at least their age and sex in order to make your sample more representative. The way I prefer to do it is with uploading some html document with a small questionnaire. The sample html can be found with experiments’ templates. You should upload it into the Resources area of your project, afterwards you can open and modify it in your project.\n\n\nThe chunk below has several aims: 1) it prints out the html questionnaire uploaded into the environment 2) it checks whether a participant filled mandatory margins otherwise red-colored warnings appear when the ‘continue’ button is pushed 3) A getVar().set() command fetches the value filled in the form’s margin with the corresponding name and assigns it to the variable we declared in the Header(); we extract the values with the jQuery library.\n\nnewTrial(\"instructions\",\n// 1) print the questionnaire\nnewHtml(\"form\", \"form.html\")\n    .print()\n    ,\n// 2) check completeness\nnewButton(\"continue\")\n        .center()\n        .print()\n        .wait(getHtml(\"form\").test.complete()\n          .failure(getHtml(\"form\").warn())\n          )\n    ,\n// 3) assign values from the form to declared variables\n    getVar(\"AGE\").set(v=>$(\"input[name='age']\").val()), \n    getVar(\"SEX\").set(v=>$(\"input[name='sex']:checked\").val())\n)"
  }
]