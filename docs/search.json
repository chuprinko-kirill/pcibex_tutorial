[
  {
    "objectID": "intro.html#getting-started",
    "href": "intro.html#getting-started",
    "title": "1  Introduction",
    "section": "1.1 Getting started",
    "text": "1.1 Getting started\n\nOpen https://doc.pcibex.net/ page in your web-browser\nIf you are a first time user, sign up\nAfter that we are transferred to the “Farm”. It is where all your projects are stored. Also, you can start a new one with a pre-made template.\n(you can watch the short video below)"
  },
  {
    "objectID": "intro.html#investigating-working-environment",
    "href": "intro.html#investigating-working-environment",
    "title": "1  Introduction",
    "section": "1.2 Investigating working environment",
    "text": "1.2 Investigating working environment\n\nLet’s create an experiment with the proposed template of the Self-paced reading task on the platform. We will look around to see how the project development environment is structured in general.\n\n\nFirst of all, let’s notice that we have some frames on the screen that divide our workspace. You can drag those frames with your cursor diagonally to customize your workspace a bit. We can identify 4 areas that are in use:\n\n\n\n“Folders and Files” consists of the environment we use for our project. It means that it contains files needed for the code execution. Some files already exist in this area and we can add some more but you shouldn’t delete existing ones. There are for subeares within it:\n\n\nResources. It is empty yet but it is essential for any experiment. You put your stimuli there. It can be a .csv file containing your orthographical stimuli or picture file and audiofile. It can also be an archive with files alike.\nScripts. Basically a folder for your file code. There is a ‘main.js’ file (.js for JavaScript). It is a file which you will modify in another area. We will not need to touch anything here.\nAesthetics. It contains css files for pre-made modules. If we are advanced users we can modify these files right in this project as we will do with our ‘main.js’ file but we don’t need it.\nModules. These are .js scripts for implementing experimental techniques via code. Files contained here are called “Controller elements” in the documentation. They are the kind of object that we will call with the newController() command in our future code. You can also open them right in the project editor here and check what is inside but ultimately you don’t need to modify them.\n\n\nNext, let’s look at the gray-shaded rectangle with code in the center of the screen. It is a place where we can edit files from our environment. Namely, we edit our code here and it is opened by default. On the top of the area you can see a fold ‘main.js’. There is a cross meaning that you can close it and cease file editing. We can try to open any file from our environment simply by clicking its name. It will open in our editing area. We can switch within our open file by clicking the folds on the top of the area and close unnecessary ones.\nAssume we successfully wrote our code in the editor and we want to check how it works. It is what we do in the lower part of the screen in the Preview Experiment area. Since we opened the Self-Paced Reading template the code can already be rendered. You can click Refresh and go through your experiment in this small window or click Open in the new tab to test it in a new browser tab. The experiment will stop when a participant reaches its end or if a bug occurs in your code. Some bugs in your code may lead to not ending the experiment at all beware.\nThe Actions area allows you to manipulate your whole project at once. You can toggle the switch to publish an experiment, e.g. allow respondents to participate or block the spreaded link.  You can share a link to demonstrate an experiment to your colleague to test it or get a public link for data gathering. You can download results from your test trials or your participants data."
  },
  {
    "objectID": "intro.html#how-to-use-templates-we-are-about-to-discuss",
    "href": "intro.html#how-to-use-templates-we-are-about-to-discuss",
    "title": "1  Introduction",
    "section": "1.3 How to use templates we are about to discuss",
    "text": "1.3 How to use templates we are about to discuss\nYou can copy the template from the templates folder or download them."
  },
  {
    "objectID": "common_things.html#convenience-code",
    "href": "common_things.html#convenience-code",
    "title": "2  Common things for all projects",
    "section": "2.1 Convenience code",
    "text": "2.1 Convenience code\n\nUsually all your projects should start with the following code. PennController.ResetPrefix() allows you to write most of commands in a shorter way. “// DebugOff()” is a commented line because it starts with “//”. It means that this line of code is disabled unless you remove the “//”. Remove it and you disable debugging menu while anyone participates at your experiment.\n\nPennController.ResetPrefix()\n// DebugOff()\n\nThere is a Sequence() function with arguments in the brackets. This command puts a strict way to execute logical blocks and other commands of your project. Some of the arguments are in quotation marks (they can be like this “” or this ’’, doesn’t matter). These are blocks that we insert later in the code. Words in quotes are names of the blocks we are free to change (but we have to change the names both in the sequence function and below in the code!). \nWe also see the SendResults() command before the “end” block. Unlike the blocks in the code, this function can be found only in this line. It writes down all the data gathered from a participant so far to the results file.\n\nSequence(\"instructions\", \"experiment\", SendResults(), \"end\")\n\nYou can add randomization to your trials within this line. For example, if we want to present our experimental task in a random manner we can write this:\n\nSequence(\"instructions\", randomize(\"experiment\"), SendResults(), \"end\")"
  },
  {
    "objectID": "common_things.html#consent-and-demographic-form",
    "href": "common_things.html#consent-and-demographic-form",
    "title": "2  Common things for all projects",
    "section": "2.2 Consent and demographic form",
    "text": "2.2 Consent and demographic form\n\nHeader – is a command that maps commands on Trial elements. In other words, you write something for Header and it is automatically applied to each of Trial elements (which are our logical blocks of experiments).\n\n\nIn this particular case we declare two global variables AGE and SEX. Then, we use the .log() command to store a variable named “AGE” as a value of “age” column in our future dataset and the same with “SEX” and “sex”. It is convenient since we will not need to write the .log() commands for all experimental trials again.\n\nHeader(\n    newVar(\"AGE\").global(),\n    newVar(\"SEX\").global() \n)\n.log(\"age\", getVar(\"AGE\"))\n.log(\"sex\", getVar(\"SEX\"))\n\nMost probably you would like to collect some demographic information about your participants at least their age and sex in order to make your sample more representative. The way I prefer to do it is with uploading some html document with a small questionnaire. The sample html can be found with experiments’ templates. You should upload it into the Resources area of your project, afterwards you can open and modify it in your project.\n\n\nThe chunk below has several aims: 1) it prints out the html questionnaire uploaded into the environment 2) it checks whether a participant filled mandatory margins otherwise red-colored warnings appear when the ‘continue’ button is pushed 3) A getVar().set() command fetches the value filled in the form’s margin with the corresponding name and assigns it to the variable we declared in the Header(); we extract the values with the jQuery library.\n\nnewTrial(\"instructions\",\n// 1) print the questionnaire\nnewHtml(\"form\", \"form.html\")\n    .print()\n    ,\n// 2) check completeness\nnewButton(\"continue\")\n        .center()\n        .print()\n        .wait(getHtml(\"form\").test.complete()\n          .failure(getHtml(\"form\").warn())\n          )\n    ,\n// 3) assign values from the form to declared variables\n    getVar(\"AGE\").set(v=>$(\"input[name='age']\").val()), \n    getVar(\"SEX\").set(v=>$(\"input[name='sex']:checked\").val())\n)"
  },
  {
    "objectID": "common_things.html#organizing-an-experimental-list",
    "href": "common_things.html#organizing-an-experimental-list",
    "title": "2  Common things for all projects",
    "section": "2.3 Organizing an experimental list",
    "text": "2.3 Organizing an experimental list\n\nAs you remember the project environment allows you to upload supplementary materials into the ‘resources’ area. Your materials can be various files: audio, video, pictures (check out other templates on the platform). Most frequently you want to use your list of sentence and question stimuli.\n\n\nMost probably you construct your stimuli in a spreadsheet like Excel or Google-documents. First, the .csv format is the only possible way to read the stimuli file in the project. Most of spreadsheet applications handle exporting your data to the .csv. Perhaps, you will just need to pay a bit extra attention to the fact that the separator in your eventual file is an actual comma because sometimes .csv export function separates values with semicolons instead. Anyway, you can fix it easily in the project environment with the auto-correction.\n\n\nSecond, your file should have a specific organization like on the figures below. The first row contains headers, each column is a one variable, all columns are placed tightly, and have no empty columns within them. Besides stimuli sentences we can add any other column for our convenience. The program will ignore them unless we say the other. For example, we can make a column \"feature\" where we will mark which variable's value is presented in the particular stimulus.\nIf you have multiple experimental lists you can separate them in the same stimuli file. In order to do this, make a column named \"group\", the code will automatically identify that your file contains several experimental lists and will equally distribute your participants among experimental groups. It means that you don’t have to make several projects for each group of participants.\n\n\n\n\n\n\n\nSpreadsheet format of stimuli\n\n\n\n\n\n\n\nPCIbex format of stimuli"
  },
  {
    "objectID": "common_things.html#finishing-slide",
    "href": "common_things.html#finishing-slide",
    "title": "2  Common things for all projects",
    "section": "2.4 Finishing slide",
    "text": "2.4 Finishing slide\n\nLet’s jump into the ending of each project. It is pretty simple. You will need to declare a new logical block with newTrial() command and write some code within the brackets. Usually I write some thanksgiving or code for people from the crowdsource within the newText() command. You can prettify any message in your code with html tags withing the messages or with some css styling within the .print() command.\n\n\nnewButton().wait() command allows you to stay your participants on the slide forever. It creates a new button and pauses everything until a user interacts with it but it doesn’t print it out, so no button actually appears on the screen.\n\nnewTrial ( \"final\" ,\n    newText(\"The experiment is over. Thank you for participating!<br>You can now close this page.\")\n        .print(\"center at 50vw\",\"middle at 50vh\")\n    ,\n    newButton().wait()\n)"
  },
  {
    "objectID": "sprt.html#separators",
    "href": "sprt.html#separators",
    "title": "3  Self-paced reading task",
    "section": "3.1 Separators",
    "text": "3.1 Separators\nLet’s begin each new experimental trial with a screen separating two consequent trials. In order to present any Controller (pre-made coded elements can be found at Modules area) you need to write its name in quotes as a first argument of the newController command. Parameters of the controller follow it after the comma.\nIt will allow to control pauses between the trials. In this case pause is 1200ms written down in the transfer parameter. It also let us encourage participants to be more careful if they make an error at comprehension task. The message is stored in the errorMessage parameter which is optional.\nDon’t miss all the commands placed with the dots. .print() puts it on the screen, .wait() actually puts a small pause until some event will happen (in this case until the transfer timer ends) and .remove() deletes the controller, so it doesn’t stack with next slides.\n newController(\"Separator\",{\n        transfer: 1200,\n        normalMessage: \"***\",\n        errorMessage: \"Wrong answer, be careful!\"\n    }).center().print(\"center at 50vw\",\"middle at 50vh\").wait().remove()"
  },
  {
    "objectID": "sprt.html#self-paced-reading-task-stimulus",
    "href": "sprt.html#self-paced-reading-task-stimulus",
    "title": "3  Self-paced reading task",
    "section": "3.2 Self-paced reading task stimulus",
    "text": "3.2 Self-paced reading task stimulus\nIn order to activate sprt itself you should choose “DashedSentence” and specify its content within the s parameter. In this case we use the experimental lits .csv, so we refer to a column where the stimuli are place with row.sentence (where sentence is a column name).\nnewController(\"DashedSentence\", {s : row.sentence}) \n  .center().print(\"center at 50vw\",\"middle at 50vh\")\n          .log()  // Make sure to log the participant's progress\n          .wait()\n          .remove()"
  },
  {
    "objectID": "sprt.html#comprehension-question",
    "href": "sprt.html#comprehension-question",
    "title": "3  Self-paced reading task",
    "section": "3.3 Comprehension question",
    "text": "3.3 Comprehension question\nIn my projects I prefer to keep comprehension questions and stimuli in the same files. However, usually there are less questions than stimuli. We don’t want to spend our participants’ time by showing them some empty screens instead of questions when we don’t have them. Thus, we introduce a function evaluating whether there is a question for the stimulus presented at the moment. It can be read as following: if the question column for the current row is not empty, introduce the Questioncontroller.\nIn the as parameter we can enlist possible answers. I prefer to store correct and wrong answers in separate columns. hasCorrect:true parameter allows to know us that the first mentioned thing in the as parameter is always true. It facilitates fixing in the resulting file whether the participant gave a correct answer or not. randomOrder:true makes an order of answers given to a participant random. So, this constructions allow us to easily write down participants responses and not to damage experiments’ adequacy.\n    newFunction(\"test_quest\", () => row.question == \"\")\n        .testNot.is() \n        .failure(\n            newController(\"Question\",\n            {q: row.question,\n            as:[row.answer_correct, row.answer_wrong],\n            hasCorrect:true, \n            randomOrder:true}) \n            .center().print(\"center at 50vw\",\"middle at 50vh\")\n            .log().wait().remove(),\n            clear()  \n                )"
  },
  {
    "objectID": "sprt.html#logging-down-features",
    "href": "sprt.html#logging-down-features",
    "title": "3  Self-paced reading task",
    "section": "3.4 Logging down features",
    "text": "3.4 Logging down features\nThis commands after the newTrial() commands allow us to write down properties of the stimuli (or ones of participants) into the resulting file. I prefer to make a distinct column naming features of interest of stimuli in order to track them during the analysis.\n.log(\"sentence_type\",row.feature)"
  },
  {
    "objectID": "sgj.html#separators",
    "href": "sgj.html#separators",
    "title": "4  Speeded grammaticlity judgement",
    "section": "4.1 Separators",
    "text": "4.1 Separators\nLet’s begin each new experimental trial with a screen separating two consequent trials. In order to present any Controller (pre-made coded elements can be found at Modules area) you need to write its name in quotes as a first argument of the newController command. Parameters of the controller follow it after the comma.\nIt will allow to control pauses between the trials. In this case pause is 1200ms written down in the transfer parameter. It also let us encourage participants to be more careful if they answer for too long. The message is stored in the errorMessage parameter which is optional.\nDon’t miss all the commands placed with the dots. .print() puts it on the screen, .wait() actually puts a small pause until some event will happen (in this case until the transfer timer ends) and .remove() deletes the controller, so it doesn’t stack with next slides.\n newController(\"Separator\",{\n        transfer: 1200,\n        normalMessage: \"***\",\n        errorMessage: \"Time to answer is out!\"\n    }).center().print(\"center at 50vw\",\"middle at 50vh\").wait().remove()"
  },
  {
    "objectID": "sgj.html#grammaticality-judgement",
    "href": "sgj.html#grammaticality-judgement",
    "title": "4  Speeded grammaticlity judgement",
    "section": "4.2 Grammaticality judgement",
    "text": "4.2 Grammaticality judgement\nIn order to make a speeded grammaticality judgement you should evoke an AcceptabilityJudgment controller and put the timer for it. In this case participants have a 5 seconds time limit specified in the timeout parameter.\nWe have to leave the s parameter blank because it is an obligatory argument but we actually have only a sentence to evaluate and no other supplementary information or question for it. So, one of the obligatory arguments like s or q should be left blank. q argument holds the sentence to evaluate we stored in the “target” column of the experimental list file.\nWe I ask to evaluate sentences on a scale from 1 to 5, which we write as an array in the as parameter. Note that we put them as character data type, in quotes, it will allow participants just to press the corresponding keys when autoFirstChar parameter is set true. presentAsScale: true presents the scale in a more comfortable horizontal manner.§\nnewController(\"AcceptabilityJudgment\",{\n            s: \"\",\n            q: row.target,\n            as: ['1','2','3','4','5'],\n            presentAsScale: true,\n            autoFirstChar : true,\n            timeout: 5000\n        }).center().print(\"center at 50vw\",\"middle at 50vh\")\n        .log()\n        .wait()\n        .remove()"
  },
  {
    "objectID": "sgj.html#logging-down-features",
    "href": "sgj.html#logging-down-features",
    "title": "4  Speeded grammaticlity judgement",
    "section": "4.3 Logging down features",
    "text": "4.3 Logging down features\nThis commands after the newTrial() commands allow us to write down properties of the stimuli (or ones of participants) into the resulting file. I prefer to make a distinct column naming features of interest of stimuli in order to track them during the analysis.\n.log(\"Condition\",row.feature)"
  },
  {
    "objectID": "after_coding.html#making-sure-everything-works",
    "href": "after_coding.html#making-sure-everything-works",
    "title": "5  After coding is done",
    "section": "5.1 Making sure everything works",
    "text": "5.1 Making sure everything works\nTo make sure that your code performs as intended regularly preview your experiment in the area at the bottom of your screen. Press “refresh” to watch the code performance within this part of the screen or “Open in new tab” to better understand how it looks like for your participants. Error messages and warnings appear at the top right corner of the screen. In order to hide this error window type DebugOff() in your code."
  },
  {
    "objectID": "after_coding.html#sharing-the-experiment",
    "href": "after_coding.html#sharing-the-experiment",
    "title": "5  After coding is done",
    "section": "5.2 Sharing the experiment",
    "text": "5.2 Sharing the experiment\nYou can share your experiment in two ways: you share it with your colleagues or testers who will leave a comment on your experiment and will not be included in your study sample and you may share it with your target participants.\nIf you want to test your experiment with somebody else before declaring its final version, you find the “Share” button in the “Actions” area. Then you copy the “Demonstration link” and share it.\nIf you want to send the experimental link directly to the target participants you need to find the “Actions” area and toggle the first tumbler to make your experiment “published”. Then you go to the “Share” button and copy the “Data-collection link” and share it.\nIf you want to cease gathering data from participants you untoggle the tumbler in this area. Participants will lose the ability to pass the experiment until you toggle it back"
  },
  {
    "objectID": "after_coding.html#analyze-the-results",
    "href": "after_coding.html#analyze-the-results",
    "title": "5  After coding is done",
    "section": "5.3 Analyze the results",
    "text": "5.3 Analyze the results\nTo download the results you should on the ‘Results’ button in the right-hand menu, click the “more options” (three dots on the right). Select the desired tab with the results of the demo or data-collection link. Click “Download” button and you will download funny-looking .csv file with results collected with the chosen link.\nThe given .csv is difficult to analyze by itself but the project team provide a technical decision how to transform in into the better looking format in the R language. You can perform this function below in your .R code to read the data in a nice way. After this you can manipulate and analyze the data in an easier manner.\n\nread.pcibex <- function(filepath, auto.colnames=TRUE, fun.col=function(col,cols){cols[cols==col]<-paste(col,\"Ibex\",sep=\".\");return(cols)}) {\n  n.cols <- max(count.fields(filepath,sep=\",\",quote=NULL),na.rm=TRUE)\n  if (auto.colnames){\n    cols <- c()\n    con <- file(filepath, \"r\")\n    while ( TRUE ) {\n      line <- readLines(con, n = 1, warn=FALSE)\n      if ( length(line) == 0) {\n        break\n      }\n      m <- regmatches(line,regexec(\"^# (\\\\d+)\\\\. (.+)\\\\.$\",line))[[1]]\n      if (length(m) == 3) {\n        index <- as.numeric(m[2])\n        value <- m[3]\n        if (is.function(fun.col)){\n         cols <- fun.col(value,cols)\n        }\n        cols[index] <- value\n        if (index == n.cols){\n          break\n        }\n      }\n    }\n    close(con)\n    return(read.csv(filepath, comment.char=\"#\", header=FALSE, col.names=cols))\n  }\n  else{\n    return(read.csv(filepath, comment.char=\"#\", header=FALSE, col.names=seq(1:n.cols)))\n  }\n}"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "pcibex_tutorial",
    "section": "",
    "text": "Preface\n\nIn this tutorial we will discuss how to run experiments on the online platform PCIbex. We will discuss how to upload stimuli, do proper code for your research, share an experiment and download results. We will look in details at two experimental techniques with online measurements: self-paced reading task (sprt for short) and speeded grammaticality judgement (sgj).\n\n\nAll discussed templates are available at the GitHub repository of this tutorial.\n\n\nFor specific questions you should check the project documentation. It includes links to video and textual tutorials by the PCIbex team. If you encounter specific issues you can check out the dedicated forums which is pretty active at the moment."
  }
]