{"title":"Speeded grammaticlity judgement","markdown":{"headingText":"Speeded grammaticlity judgement","containsRefs":false,"markdown":"\nIn this chapter we will discuss how to add to your speeded grammaticality judgement task. The chunk below represents a possible way to code sptr into your project. It consists of the following parts:\n\n1.  Introducing the uploaded .csv file with stimuli. 'row' is a variable name which will iterate through each row of you .csv file.\n\n2.  Introduce a new experimental block and write within it code just for one trial of your task. Instead of placing full stimulus sentences we will access your experimental list with *row* variable.\n\n3.  Write down to your resulting file some information about participants or stimuli. If you use *Header()* command you don't need to write commands to log participants' information from the questionnaire. Here, I usually prefer to write down some information about stimuli that I stored in the .csv list. It can ease the further analysis of the results.\n\n``` javascript\n// 1) Activate the stimuli list you uploaded\nTemplate( \"list.csv\" ,\n// 2) Make an example trial that will be filled with list's values\n    row => newTrial( \"test\" ,  \n        \n        newController(\"Separator\",{\n            transfer: 1200,\n            normalMessage: \"***\",\n            errorMessage: \"Time to answer is out!\"\n        }).center().print(\"center at 50vw\",\"middle at 50vh\").wait().remove()\n        ,\n        newController(\"AcceptabilityJudgment\",{\n            s: \"\",\n            q: row.target,\n            as: ['1','2','3','4','5'],\n            presentAsScale: true,\n            autoFirstChar : true,\n            timeout: 5000\n        }).center().print(\"center at 50vw\",\"middle at 50vh\")\n        .log()\n        .wait()\n        .remove()\n    )\n// 3) write down stimluli info in the resulting file\n    .log( \"Condition\" , row.condition)\n)\n```\n\nLet's look closer at the the code parts. *Template(\"pcibex_test.csv\", row =\\>)* holds the whole code of the experimental block in the brackets. First, we declare the name of the .csv file uploaded into the environment. Secondly, we declare a variable *row* that will iterate through each row of the file (you can change the name). In order to specify the column to refer you type *row* and the name of the column in the file with the dot, e.g. *row.sentence*.\n\n## Separators\n\nLet's begin each new experimental trial with a screen separating two consequent trials. In order to present any ***Controller*** (pre-made coded elements can be found at *Modules* area) you need to write its name in quotes as a first argument of the *newController* command. Parameters of the controller follow it after the comma.\n\nIt will allow to control pauses between the trials. In this case pause is 1200ms written down in the *transfer* parameter. It also let us encourage participants to be more careful if they answer for too long. The message is stored in the *errorMessage* parameter which is optional.\n\nDon't miss all the commands placed with the dots. *.print()* puts it on the screen, *.wait()* actually puts a small pause until some event will happen (in this case until the transfer timer ends) and *.remove()* deletes the controller, so it doesn't stack with next slides.\n\n``` javascript\n newController(\"Separator\",{\n        transfer: 1200,\n        normalMessage: \"***\",\n        errorMessage: \"Time to answer is out!\"\n    }).center().print(\"center at 50vw\",\"middle at 50vh\").wait().remove()\n```\n\n## Grammaticality judgement\n\nIn order to make a speeded grammaticality judgement you should evoke an *AcceptabilityJudgment* controller and put the timer for it. In this case participants have a 5 seconds time limit specified in the *timeout* parameter.\n\nWe have to leave the *s* parameter blank because it is an obligatory argument but we actually have only a sentence to evaluate and no other supplementary information or question for it. So, one of the obligatory arguments like *s* or *q* should be left blank. *q* argument holds the sentence to evaluate we stored in the \"target\" column of the experimental list file.\n\nWe I ask to evaluate sentences on a scale from 1 to 5, which we write as an array in the *as* parameter. Note that we put them as character data type, in quotes, it will allow participants just to press the corresponding keys when *autoFirstChar* parameter is set true. *presentAsScale: true* presents the scale in a more comfortable horizontal manner.ยง\n\n``` javascript\nnewController(\"AcceptabilityJudgment\",{\n            s: \"\",\n            q: row.target,\n            as: ['1','2','3','4','5'],\n            presentAsScale: true,\n            autoFirstChar : true,\n            timeout: 5000\n        }).center().print(\"center at 50vw\",\"middle at 50vh\")\n        .log()\n        .wait()\n        .remove()\n```\n\n## Logging down features\n\nThis commands after the *newTrial*() commands allow us to write down properties of the stimuli (or ones of participants) into the resulting file. I prefer to make a distinct column naming features of interest of stimuli in order to track them during the analysis.\n\n``` javascript\n.log(\"Condition\",row.feature) \n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"sgj.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","bibliography":["references.bib"],"editor":"visual","theme":"cosmo"},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"sgj.pdf"},"language":{},"metadata":{"block-headings":true,"bibliography":["references.bib"],"editor":"visual","documentclass":"scrreprt"},"extensions":{"book":{}}}}}