{"title":"Self-paced reading task","markdown":{"headingText":"Self-paced reading task","containsRefs":false,"markdown":"\nIn this chapter we will discuss how to add to your project self-paced reading task. The chunk below represents a possible way to code sptr into your project. It consists of the following parts:\n\n1.  Introducing the uploaded .csv file with stimuli. 'row' is a variable name which will iterate through each row of you .csv file.\n\n2.  Introduce a new experimental block and write within it code just for one trial of your task + comprehension question. Instead of placing full stimulus sentences we will access your experimental list with *row* variable.\n\n3.  Write down to your resulting file some information about participants or stimuli. If you use *Header()* command you don't need to write commands to log participants' information from the questionnaire. Here, I usually prefer to write down some information about stimuli that I stored in the .csv list. It can ease the further analysis of the results.\n\n``` javascript\n// 1) Activate the stimuli list you uploaded\nTemplate(\"pcibex_test.csv\", row =>\n// 2) Make an example trial that will be filled with list's values\nnewTrial( \"experiment\",\n    newController(\"Separator\",{\n        transfer: 1200,\n        normalMessage: \"***\",\n        errorMessage: \"Wrong answer, be careful!\"\n    }).center().print(\"center at 50vw\",\"middle at 50vh\").wait().remove()\n    ,\n    newController(\"DashedSentence\", {s : row.sentence}) \n        .center().print(\"center at 50vw\",\"middle at 50vh\")\n        .log()  // Make sure to log the participant's progress\n        .wait()\n        .remove()\n    ,\n    // Add comprehension question if there is one     \n    newFunction(\"test_quest\", () => row.question == \"\")\n        .testNot.is() \n        .failure(\n            newController(\"Question\",\n            {q: row.question,\n            as:[row.answer_correct, row.answer_wrong],\n            hasCorrect:true, \n            randomOrder:true}) \n            .center().print(\"center at 50vw\",\"middle at 50vh\")\n            .log().wait().remove(),\n            clear()  \n                )\n    )\n// 3) write down stimluli info in the resulting file\n    .log(\"sentence_type\",row.feature) \n)\n```\n\nLet's look closer at the the code parts. *Template(\"pcibex_test.csv\", row =\\>)* holds the whole code of the experimental block in the brackets. First, we declare the name of the .csv file uploaded into the environment. Secondly, we declare a variable *row* that will iterate through each row of the file (you can change the name). In order to specify the column to refer you type *row* and the name of the column in the file with the dot, e.g. *row.sentence*.\n\n## Separators\n\nLet's begin each new experimental trial with a screen separating two consequent trials. In order to present any ***Controller*** (pre-made coded elements can be found at *Modules* area) you need to write its name in quotes as a first argument of the *newController* command. Parameters of the controller follow it after the comma.\n\nIt will allow to control pauses between the trials. In this case pause is 1200ms written down in the *transfer* parameter. It also let us encourage participants to be more careful if they make an error at comprehension task. The message is stored in the *errorMessage* parameter which is optional.\n\nDon't miss all the commands placed with the dots. *.print()* puts it on the screen, *.wait()* actually puts a small pause until some event will happen (in this case until the transfer timer ends) and *.remove()* deletes the controller, so it doesn't stack with next slides.\n\n``` javascript\n newController(\"Separator\",{\n        transfer: 1200,\n        normalMessage: \"***\",\n        errorMessage: \"Wrong answer, be careful!\"\n    }).center().print(\"center at 50vw\",\"middle at 50vh\").wait().remove()\n```\n\n## Self-paced reading task stimulus\n\nIn order to activate sprt itself you should choose \"DashedSentence\" and specify its content within the *s* parameter. In this case we use the experimental lits .csv, so we refer to a column where the stimuli are place with *row.sentence* (where *sentence* is a column name).\n\n``` javascript\nnewController(\"DashedSentence\", {s : row.sentence}) \n  .center().print(\"center at 50vw\",\"middle at 50vh\")\n          .log()  // Make sure to log the participant's progress\n          .wait()\n          .remove()\n```\n\n## Comprehension question\n\nIn my projects I prefer to keep comprehension questions and stimuli in the same files. However, usually there are less questions than stimuli. We don't want to spend our participants' time by showing them some empty screens instead of questions when we don't have them. Thus, we introduce a function evaluating whether there is a question for the stimulus presented at the moment. It can be read as following: if the *question* column for the current row is not empty, introduce the *Questioncontroller.*\n\nIn the *as* parameter we can enlist possible answers. I prefer to store correct and wrong answers in separate columns. *hasCorrect:true* parameter allows to know us that the first mentioned thing in the *as* parameter is always true. It facilitates fixing in the resulting file whether the participant gave a correct answer or not. *randomOrder:true* makes an order of answers given to a participant random. So, this constructions allow us to easily write down participants responses and not to damage experiments' adequacy.\n\n``` javascript\n    newFunction(\"test_quest\", () => row.question == \"\")\n        .testNot.is() \n        .failure(\n            newController(\"Question\",\n            {q: row.question,\n            as:[row.answer_correct, row.answer_wrong],\n            hasCorrect:true, \n            randomOrder:true}) \n            .center().print(\"center at 50vw\",\"middle at 50vh\")\n            .log().wait().remove(),\n            clear()  \n                )\n```\n\n## Logging down features\n\nThis commands after the *newTrial*() commands allow us to write down properties of the stimuli (or ones of participants) into the resulting file. I prefer to make a distinct column naming features of interest of stimuli in order to track them during the analysis.\n\n``` javascript\n.log(\"sentence_type\",row.feature) \n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"sprt.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.269","bibliography":["references.bib"],"editor":"visual","theme":"cosmo"},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"sprt.pdf"},"language":{},"metadata":{"block-headings":true,"bibliography":["references.bib"],"editor":"visual","documentclass":"scrreprt"},"extensions":{"book":{}}}}}